.TH VOLATILITY "1"  "Mar 2019" "VOLATILITY 2.6.1" "advanced memory forensics framework"
.\" Text automatically generated by txt2man
.SH NAME
\fBvolatility \fP- advanced memory forensics framework
\fB
.SH SYNOPSIS
.nf
.fam C
 \fBvol\fP [\fIoption\fP]
 \fBvol\fP \fB-f\fP [\fIimage\fP] \fB--profile\fP=[profile] [\fIplugin\fP]

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
The Volatility Framework is a completely open collection of tools for the
extraction of digital artifacts from volatile memory (RAM) samples. It is
useful in forensics analysis. The extraction techniques are performed
completely independent of the system being investigated but offer
unprecedented visibility into the runtime state of the system.
.PP
Volatility supports several versions of the MS Windows, Linux and MAC OSX:
.PP
MS Windows:
.RS
.IP \(bu 3
32-bit Windows XP Service Pack 2 and 3
.IP \(bu 3
32-bit Windows 2003 Server Service Pack 0, 1, 2
.IP \(bu 3
32-bit Windows Vista Service Pack 0, 1, 2
.IP \(bu 3
32-bit Windows 2008 Server Service Pack 1, 2 (there is no SP0)
.IP \(bu 3
32-bit Windows 7 Service Pack 0, 1
.IP \(bu 3
32-bit Windows 8, 8.1, and 8.1 Update 1
.IP \(bu 3
32-bit Windows 10 (initial support)
.IP \(bu 3
64-bit Windows XP Service Pack 1 and 2 (there is no SP0)
.IP \(bu 3
64-bit Windows 2003 Server Service Pack 1 and 2 (there is no SP0)
.IP \(bu 3
64-bit Windows Vista Service Pack 0, 1, 2
.IP \(bu 3
64-bit Windows 2008 Server Service Pack 1 and 2 (there is no SP0)
.IP \(bu 3
64-bit Windows 2008 R2 Server Service Pack 0 and 1
.IP \(bu 3
64-bit Windows 7 Service Pack 0 and 1
.IP \(bu 3
64-bit Windows 8, 8.1, and 8.1 Update 1
.IP \(bu 3
64-bit Windows Server 2012 and 2012 R2
.IP \(bu 3
64-bit Windows 10 (initial support)
.RE
.PP
Linux:
.RS
.IP \(bu 3
32-bit Linux kernels 2.6.11 to 4.2.3
.IP \(bu 3
64-bit Linux kernels 2.6.11 to 4.2.3
.IP \(bu 3
OpenSuSE, Ubuntu, Debian, CentOS, Fedora, Mandriva, etc
.RE
.PP
Mac OSX:
.RS
.IP \(bu 3
32-bit 10.5.x Leopard (the only 64-bit 10.5 is Server, which isn't supported)
.IP \(bu 3
32-bit 10.6.x Snow Leopard
.IP \(bu 3
64-bit 10.6.x Snow Leopard
.IP \(bu 3
32-bit 10.7.x Lion
.IP \(bu 3
64-bit 10.7.x Lion
.IP \(bu 3
64-bit 10.8.x Mountain Lion (there is no 32-bit version)
.IP \(bu 3
64-bit 10.9.x Mavericks (there is no 32-bit version)
.IP \(bu 3
64-bit 10.10.x Yosemite (there is no 32-bit version)
.IP \(bu 3
64-bit 10.11.x El Capitan (there is no 32-bit version)
.RE
.PP
The memory formats supported are:
.RS
.IP \(bu 3
Raw linear sample (dd)
.IP \(bu 3
Hibernation file
.IP \(bu 3
Crash dump file
.IP \(bu 3
VirtualBox ELF64 core dump
.IP \(bu 3
VMware saved state and snapshot files
.IP \(bu 3
EWF format (E01)
.IP \(bu 3
LiME (Linux Memory Extractor) format
.IP \(bu 3
Mach-o file format
.IP \(bu 3
QEMU virtual machine dumps
.IP \(bu 3
Firewire
.IP \(bu 3
HPAK (FDPro)
.RE
.PP
The supported address spaces (RAM types) are:
.RS
.IP \(bu 3
AMD64PagedMemory - Standard AMD 64-bit address space
.IP \(bu 3
ArmAddressSpace - Address space for ARM processors
.IP \(bu 3
FileAddressSpace - This is a direct file AS
.IP \(bu 3
HPAKAddressSpace - This AS supports the HPAK format
.IP \(bu 3
IA32PagedMemory - Standard IA-32 paging address space
.IP \(bu 3
IA32PagedMemoryPae - This class implements the IA-32 PAE paging address space. It is responsible
.IP \(bu 3
LimeAddressSpace - Address space for Lime
.IP \(bu 3
MachOAddressSpace - Address space for mach-o files to support atc-ny memory reader
.IP \(bu 3
OSXPmemELF - This AS supports VirtualBox ELF64 coredump format
.IP \(bu 3
QemuCoreDumpElf - This AS supports Qemu ELF32 and ELF64 coredump format
.IP \(bu 3
SkipDuplicatesAMD64PagedMemory - Windows 8/10-specific AMD 64-bit address space
.IP \(bu 3
VMWareAddressSpace - This AS supports VMware snapshot (VMSS) and saved state (VMSS) files
.IP \(bu 3
VMWareMetaAddressSpace - This AS supports the VMEM format with VMSN/VMSS metadata
.IP \(bu 3
VirtualBoxCoreDumpElf64 - This AS supports VirtualBox ELF64 coredump format
.IP \(bu 3
WindowsAMD64PagedMemory        - Windows-specific AMD 64-bit address space.
.IP \(bu 3
WindowsCrashDumpSpace32 - This AS supports windows Crash Dump format
.IP \(bu 3
WindowsCrashDumpSpace64 - This AS supports windows Crash Dump format
.IP \(bu 3
WindowsCrashDumpSpace64BitMap - This AS supports Windows BitMap Crash Dump format
.IP \(bu 3
WindowsHiberFileSpace32 - This is a hibernate address space for windows hibernation files
.RE
.PP
There are exemplar memory images for tests at
https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples.
.SH OPTIONS
.TP
.B
\fB-h\fP, \fB--help\fP
List all available options and their default values.
Default values may be set in the configuration file (/etc/volatilityrc).
.TP
.B
\fB--conf-file\fP=/root/.volatilityrc
User based configuration file.
.TP
.B
\fB-d\fP, \fB--debug\fP
Debug Volatility.
.TP
.B
\fB--plugins\fP=PLUGINS
Additional \fIplugin\fP directories to use (colon separated).
.TP
.B
\fB--info\fP
Print information about all registered objects.
.TP
.B
\fB--cache-directory\fP=/root/.cache/volatility
Directory where cache files are stored.
.TP
.B
\fB--cache\fP
Use caching.
.TP
.B
\fB--tz\fP=TZ
Set the timezone for displaying timestamps using pytz (if installed)
or tzset
.TP
.B
\fB-f\fP FILENAME, \fB--filename\fP=FILENAME
Filename to use when opening an \fIimage\fP.
.TP
.B
\fB--profile\fP=WinXPSP2x86
Name of the profile to load (use \fB--info\fP to see a list of supported
profiles).
.TP
.B
\fB-l\fP LOCATION, \fB--location\fP=LOCATION
A URN location from which to load an address space.
.TP
.B
\fB-w\fP, \fB--write\fP
Enable write support.
.TP
.B
\fB--dtb\fP=DTB
DTB Address.
.TP
.B
\fB--shift\fP=SHIFT
Mac KASLR shift address.
.TP
.B
\fB--output\fP=text
Output in this format.
.TP
.B
\fB--output-file\fP=OUTPUT_FILE
Write output in this file.
.TP
.B
\fB-v\fP, \fB--verbose\fP
Verbose information.
.TP
.B
\fB-g\fP KDBG, \fB--kdbg\fP=KDBG
Specify a specific KDBG virtual address. For 64-bit Windows 8 and
above this is the address of KdCopyDataBlock.
.TP
.B
\fB--force\fP
Force utilization of suspect profile.
.TP
.B
\fB-k\fP KPCR, \fB--kpcr\fP=KPCR
Specify a specific KPCR address.
.TP
.B
\fB--cookie\fP=COOKIE
Specify the address of nt!ObHeaderCookie (valid for Windows 10 only).
.SH PLUGINS AND PROFILES
The supported \fIplugin\fP commands and profiles can be viewed if using the command '$ volatility \fB--info\fP'.
Note that Linux and MAC OSX allowed plugins will have the 'linux_' and 'mac_' prefixes. Plugins
without these prefixes were designed for MS Windows.
.PP
Profiles are maps used by Volatility to understand the operational systems. The allowed MS Windows
profiles are provided by the Volatility.
.PP
You must create your own profiles for Linux and MAC OSX. For this, you can use the tools from the
directory /usr/share/python-volatility/tools. On Fedora with python-volatility package installed
you can use script vol_genprofile to generate profile for the currently running kernel.
.PP
For MS Windows images, to determine the OS type, you can use:
.PP
.nf
.fam C
    $ vol \-f <image> imageinfo

    or

    $ vol \-f <image> kdbgscan

.fam T
.fi
.SH ENVIRONMENT VARIABLES
On a GNU/Linux or OS X system, these variables can be set:
.RS
.IP \(bu 3
VOLATILITY_PROFILE - Specifies a profile to be used as default, making unnecessary a '\fB--profile\fP'
\fIoption\fP.
.IP \(bu 3
VOLATILITY_LOCATION - Specifies the path of an \fIimage\fP. So, the Volatility command will not need
a file name via '\fB-f\fP' \fIoption\fP.
.IP \(bu 3
VOLATILITY_KDBG - Specifies a KDBG address. See EXTRA PROCEDURES to more details.
.RE
.PP
Other \fIplugin\fP flags may be utilized in this way, for example KPCR, DTB or PLUGINS. When exporting
variables, simply prefix VOLATILITY_ before the flag name (e.g. VOLATILITY_KPCR). Otherwise, the
flag name remains the same when adding it to the configuration file.
.PP
If you have a path with a space or more in the name, spaces should be replaced with %20 instead
(e.g. LOCATION=file:///tmp/my%20image.img).
.PP
Example:
.PP
.nf
.fam C
    $ export VOLATILITY_PROFILE=Win7SP0x86
    $ export VOLATILITY_LOCATION=file:///tmp/myimage.img
    $ export VOLATILITY_KDBG=0x82944c28

.fam T
.fi
.SH CONFIGURATION FILES
Configuration files are typically 'volatilityrc' in the current directory or '~/.volatilityrc' in
user's home directory, or at user specified path, using the \fB--conf-file\fP \fIoption\fP. An example of the
file contents is shown below:
.PP
.nf
.fam C
    [DEFAULT]
    PROFILE=Win7SP0x86
    LOCATION=file:///tmp/myimage.img
    KDBG=0x82944c28

.fam T
.fi
Other \fIplugin\fP flags may be utilized in this way, for example KPCR, DTB or PLUGINS. When exporting
variables, simply prefix VOLATILITY_ before the flag name (e.g. VOLATILITY_KPCR). Otherwise, the
flag name remains the same when adding it to the configuration file.
.PP
If you have a path with a space or more in the name, spaces should be replaced with %20 instead
(e.g. LOCATION=file:///tmp/my%20image.img).
.SH EXTRA PROCEDURES
Setting a timezone
.PP
.nf
.fam C
  Timestamps extracted from memory can either be in system-local time, or in Universal Time
  Coordinates (UTC). If they're in UTC, Volatility can be instructed to display them in a time
  zone of the analyst's choosing. To choose a timezone, use one of the standard timezone
  names (such as America/Sao_Paulo, Europe/London, US/Eastern or most Olson timezones) with
  the \-\-tz=TIMEZONE flag.

  Volatility attempts to use pytz if installed, otherwise it uses tzset.

  Please note that specifying a timezone will not affect how system-local times are displayed. If
  you identify a time that you know is UTC-based, please file it as an issue in the issue tracker.
  By default the _EPROCESS CreateTime and ExitTime timestamps are in UTC.

.fam T
.fi
Setting the DTB
.PP
.nf
.fam C
  The DTB (Directory Table Base) is what Volatility uses to translate virtual addresses to physical
  addresses. By default, a kernel DTB is used (from the Idle/System process). If you want to use a
  different process's DTB when accessing data, supply the address to \-\-dtb=ADDRESS.

.fam T
.fi
Setting the KDBG address (this is a Windows-only \fIoption\fP)
.PP
.nf
.fam C
  Volatility scans for the '_KDDEBUGGER_DATA64' structure using hard-coded signatures "KDBG" and
  a series of sanity checks. These signatures are not critical for the operating system to function
  properly, thus malware can overwrite them in attempt to throw off tools that do rely on the
  signature. Additionally, in some cases there may be more than one '_KDDEBUGGER_DATA64' (for
  example if you apply a major OS update and don't reboot), which can cause confusion and lead to
  incorrect process and module listings, among other problems. If you know the address
  add '_KDDEBUGGER_DATA64', you can specify it with \-\-kdbg=ADDRESS and this override the automated
  scans. For more information, see the kdbgscan plugin.

.fam T
.fi
Setting the KPCR address (this is a Windows-only \fIoption\fP)
.PP
.nf
.fam C
  There is one KPCR (Kernel Processor Control Region) for each CPU on a system. Some Volatility
  plugins display per-processor information. Thus if you want to display data for a specific CPU, for
  example CPU 3 instead of CPU 1, you can pass the address of that CPU's KPCR with \-\-kpcr=ADDRESS.
  To locate the KPCRs for all CPUs, see the kpcrscan plugin. Also note that starting in Volatility 2.2,
  many of the plugins such as idt and gdt automatically iterate through the list of KPCRs.

.fam T
.fi
Enabling write support
.PP
.nf
.fam C
  Write support in Volatility should be used with caution. Therefore, to actually enable it, you must
  not only type \-\-write on command-line but you must type a 'password' in response to a question that
  you'll be prompted with.  In most cases you will not want to use write support since it can lead to
  corruption or modification of data in your memory dump. However, special cases exist that make this
  feature really interesting. For example, you could cleanse a live system of certain malware by
  writing to RAM over firewire, or you could break into a locked workstation by patching bytes in the
  winlogon DLLs.

.fam T
.fi
Specifying additional \fIplugin\fP directories
.PP
.nf
.fam C
  Volatility's plugin architecture can load plugin files from multiple directories at once. In the
  Volatility source code, most plugins are located in volatility/plugins. However, there is another
  directory (volatility/contrib) which is reserved for contributions from third party developers, or
  weakly supported plugins that simply are not enabled by default. To access these plugins you just
  type \-\-plugins=contrib/plugins on command-line. It also enables you to create a separate directory
  of your own plugins that you can manage without having to add/remove/modify files in the core
  Volatility directories.

  Notes:

  * On Fedora systems, the contrib/plugins directory is at:
    /usr/lib/python2.7/site-packages/volatility/contrib

  * Subdirectories will also be traversed as long as there is an __init__.py file (which can be empty)
    within them.

  * The parameter to \-\-plugins can also be a zip file containing the plugins such
    as \-\-plugins=myplugins.zip. Due to the way plugins are loaded, the external plugins directory
    or zip file must be specified before any plugin-specific arguments (including the name of the
    plugin). Example:

    $ vol \-\-plugins=contrib \-f XPSP3x86.vmem example

.fam T
.fi
Choosing an output format
.PP
.nf
.fam C
  By default, plugins use text renderers to standard output. If you want to redirect to a file, you
  can of course use the console's redirection (i.e. > out.txt) or you could use \-\-output-file=out.txt.
  The reason you can also choose \-\-output=FORMAT is for allowing plugins to also render output as HTML,
  JSON, SQL, or whatever you choose. However, there are no plugins with those alternate output formats
  pre-configured for use, so you'll need to add a function named render_html, render_json, render_sql,
  respectively to each plugin before using \-\-output=HTML.

.fam T
.fi
Plugin specific options
.PP
.nf
.fam C
  Many plugins accept arguments of their own, which are independent of the global options. To see the
  list of available options, type both the plugin name and \-h/--help on command-line.

.nf
.fam C
    $ vol dlllist \-h

.fam T
.fi
Debug mode
.PP
.nf
.fam C
  If something isn't happening in Volatility the expected way, try to run the command with \-d/\-\-debug.
  This will enable the printing of debug messages to standard error. To more debug levels, as in using
  pdb debugger), add \-d \-d \-d to command.

.fam T
.fi
Using Volatility as a library
.PP
.nf
.fam C
  Although its possible to use Volatility as a library, (there are plans to support it better in the
  future). Currently, to import Volatility from a python script, the following example code can be used:

.nf
.fam C
    $ python
    >>> import volatility.conf as conf
    >>> import volatility.registry as registry
    >>> registry.PluginImporter()
    <volatility.registry.PluginImporter object at 0x7f9608f3ac10>
    >>> config = conf.ConfObject()
    >>> import volatility.commands as commands
    >>> import volatility.addrspace as addrspace
    >>> registry.register_global_options(config, commands.Command)
    >>> registry.register_global_options(config, addrspace.BaseAddressSpace)
    >>> config.parse_options()
    >>> config.PROFILE="WinXPSP2x86"
    >>> config.LOCATION = "file:///media/memory/private/image.dmp"
    >>> import volatility.plugins.taskmods as taskmods
    >>> p = taskmods.PSList(config)
    >>> for process in p.calculate():
    \.\.\.   print process

.fam T
.fi
.SH EXAMPLES
To see all available plugins, profiles, scanner checks and address spaces:
.PP
.nf
.fam C
    $ vol \-\-info

.fam T
.fi
To list all active processes found in a MS Windows 8 SP0 \fIimage\fP:
.PP
.nf
.fam C
    $ vol \-f win8.raw \-\-profile=Win8SP0x86 pslist

.fam T
.fi
To list all active processes found in a MS Windows 8 SP0 \fIimage\fP, using a timezone:
.PP
.nf
.fam C
    $ vol \-f win8.raw \-\-profile=Win8SP0x86 pslist \-\-tz=America/Sao_Paulo

.fam T
.fi
To show the kernel bnuffer from a Linux 3.2.63 \fIimage\fP:
.PP
.nf
.fam C
    $ vol \-f mem.dd \-\-profile=Linux_3_2_63_x64 linux_dmesg

.fam T
.fi
.SH NOTES
This manpage was based in some tests and several official documents about Volatility.
For other information and tutorials, see:
.RS
.IP \(bu 3
http://www.volatilityfoundation.org
.IP \(bu 3
https://github.com/volatilityfoundation/volatility/wiki
.SH AUTHOR
Volatility was written by Volatility Foundation and several contributors. For contact,
use the email <info@volatilityfoundation.org>.
.PP
This manual page was written by Joao Eriberto Mota Filho <eriberto@debian.org> for the
Debian project (but may be used by others).
